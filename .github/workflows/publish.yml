# Whisper API SDK - Python Publish Pipeline
# Auto-generated by OpenAPI Generator
# Publishes to PyPI when a new GitHub release is created

name: Publish

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Extract version from release tag
        id: version
        run: |
          # Remove 'v' prefix from tag if present (e.g., v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“Œ Release version: $VERSION"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools

      - name: Update package version
        run: |
          # Update version in setup.py or pyproject.toml
          if [ -f setup.py ]; then
            sed -i "s/version=['\"].*['\"]/version='${{ steps.version.outputs.version }}'/" setup.py
            echo "âœ“ Updated setup.py to version ${{ steps.version.outputs.version }}"
          fi
          if [ -f pyproject.toml ]; then
            sed -i "s/^version = .*/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml
            echo "âœ“ Updated pyproject.toml to version ${{ steps.version.outputs.version }}"
          fi
          if [ -f {whisper_api_sdk}/__init__.py ]; then
            sed -i "s/__version__ = .*/__version__ = '${{ steps.version.outputs.version }}'/" {whisper_api_sdk}/__init__.py
            echo "âœ“ Updated __init__.py to version ${{ steps.version.outputs.version }}"
          fi

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ steps.version.outputs.version }}
          path: dist/

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Extract version from release tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ steps.version.outputs.version }}
          path: dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/* --repository-url https://upload.pypi.org/legacy/

      - name: Create publish summary
        if: success()
        run: |
          echo "## ðŸš€ Package Published Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: {whisper_api_sdk}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: PyPI" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ github.event.release.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¥ Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install {whisper_api_sdk}==${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

# coding: utf-8

"""
    Whisper API Platform

    Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@whisper.security
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DomainerAsyncRequestDTO(BaseModel):
    """
    Parameters for an asynchronous domain search (either similarity or free-text)
    """ # noqa: E501
    domain_name: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=255)]] = Field(default=None, description="(Required for SIMILARITY requests) Domain name to search for similar domains", alias="domainName")
    similarity_type: Optional[StrictStr] = Field(default=None, description="(Required for SIMILARITY requests) Type of similarity to use: CONTAINS, SOUNDING, PREFIX, SUFFIX, TYPO, UTFVARS", alias="similarityType")
    query_string: Optional[StrictStr] = Field(default=None, description="(Required for SEARCH requests) Query string (supports standard query syntax)", alias="queryString")
    operator: Optional[StrictStr] = Field(default='AND', description="(Optional for SEARCH requests) Default operator between query terms if not specified")
    level: Optional[StrictStr] = Field(default='ALL', description="(Optional for SEARCH requests) Filter results by absolute domain level (dot count)")
    find_available: Optional[StrictBool] = Field(default=False, description="Set to true to find AVAILABLE similar domains (typo/sounding) instead of existing ones. Requires domainName, ignores similarityType/queryString/operator/level.", alias="findAvailable")
    limit: Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]] = Field(default=100, description="Maximum number of results to return (use a reasonable limit to prevent excessive processing)")
    callback_url: StrictStr = Field(description="URL to call with results when the search is complete (must be accessible from the server)", alias="callbackUrl")
    __properties: ClassVar[List[str]] = ["domainName", "similarityType", "queryString", "operator", "level", "findAvailable", "limit", "callbackUrl"]

    @field_validator('similarity_type')
    def similarity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTAINS', 'PREFIX', 'SUFFIX', 'TYPO', 'SOUNDING', 'UTFVARS', 'TLD_VARIANTS', 'TYPO_OR_SOUNDING', 'LEVENSHTEIN', 'CONTAINS', 'SOUNDING', 'PREFIX', 'SUFFIX', 'TYPO', 'UTFVARS']):
            raise ValueError("must be one of enum values ('CONTAINS', 'PREFIX', 'SUFFIX', 'TYPO', 'SOUNDING', 'UTFVARS', 'TLD_VARIANTS', 'TYPO_OR_SOUNDING', 'LEVENSHTEIN', 'CONTAINS', 'SOUNDING', 'PREFIX', 'SUFFIX', 'TYPO', 'UTFVARS')")
        return value

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'IMMEDIATE', 'MAX_DEPTH']):
            raise ValueError("must be one of enum values ('ALL', 'IMMEDIATE', 'MAX_DEPTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainerAsyncRequestDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainerAsyncRequestDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domainName": obj.get("domainName"),
            "similarityType": obj.get("similarityType"),
            "queryString": obj.get("queryString"),
            "operator": obj.get("operator") if obj.get("operator") is not None else 'AND',
            "level": obj.get("level") if obj.get("level") is not None else 'ALL',
            "findAvailable": obj.get("findAvailable") if obj.get("findAvailable") is not None else False,
            "limit": obj.get("limit") if obj.get("limit") is not None else 100,
            "callbackUrl": obj.get("callbackUrl")
        })
        return _obj



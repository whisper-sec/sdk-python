# coding: utf-8

"""
    Whisper API Platform

    Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@whisper.security
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DomainIntelligenceResponseSummary(BaseModel):
    """
    DomainIntelligenceResponseSummary
    """ # noqa: E501
    domain_name: Optional[StrictStr] = Field(default=None, description="Domain name")
    registrar: Optional[StrictStr] = Field(default=None, description="Domain registrar")
    registration_date: Optional[StrictStr] = Field(default=None, description="Registration date")
    expiration_date: Optional[StrictStr] = Field(default=None, description="Expiration date")
    status: Optional[StrictStr] = Field(default=None, description="Domain status")
    has_trademark: Optional[StrictBool] = Field(default=None, description="Trademark status")
    dns_provider: Optional[StrictStr] = Field(default=None, description="Primary DNS provider")
    total_links_in: Optional[StrictInt] = Field(default=None, description="Incoming links")
    total_links_out: Optional[StrictInt] = Field(default=None, description="Outgoing links")
    __properties: ClassVar[List[str]] = ["domain_name", "registrar", "registration_date", "expiration_date", "status", "has_trademark", "dns_provider", "total_links_in", "total_links_out"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainIntelligenceResponseSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainIntelligenceResponseSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain_name": obj.get("domain_name"),
            "registrar": obj.get("registrar"),
            "registration_date": obj.get("registration_date"),
            "expiration_date": obj.get("expiration_date"),
            "status": obj.get("status"),
            "has_trademark": obj.get("has_trademark"),
            "dns_provider": obj.get("dns_provider"),
            "total_links_in": obj.get("total_links_in"),
            "total_links_out": obj.get("total_links_out")
        })
        return _obj



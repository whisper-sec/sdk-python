# coding: utf-8

"""
    Whisper API Platform

    Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@whisper.security
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from noctis_frontgraph_sdk.models.domainer_similarity_type import DomainerSimilarityType
from typing import Optional, Set
from typing_extensions import Self

class DomainerAsyncResultDTO(BaseModel):
    """
    Results and status information for an asynchronous domain search request (similarity or free-text)
    """ # noqa: E501
    request_id: StrictStr = Field(description="Unique identifier for the request", alias="requestId")
    domain_name: Optional[StrictStr] = Field(default=None, description="Domain name that was searched", alias="domainName")
    similarity_type: Optional[DomainerSimilarityType] = Field(default=None, alias="similarityType")
    query_string: Optional[StrictStr] = Field(default=None, description="Query string used for the search (only for SEARCH requests)", alias="queryString")
    operator: Optional[StrictStr] = Field(default=None, description="Default operator used between query terms (only for SEARCH requests)")
    level: Optional[StrictStr] = Field(default=None, description="Absolute domain level filter applied (only for SEARCH requests)")
    limit: Annotated[int, Field(strict=True, ge=1)] = Field(description="Maximum number of results requested")
    created_at: datetime = Field(description="Time when the request was created", alias="createdAt")
    completed_at: Optional[datetime] = Field(default=None, description="Time when the request was completed (null if still processing)", alias="completedAt")
    status: StrictStr = Field(description="Request status")
    results: Optional[List[StrictStr]] = Field(default=None, description="List of similar domains found (null if still processing)")
    result_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Total number of results found", alias="resultCount")
    processing_time_ms: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=None, description="Time taken to process the request in milliseconds (-1 if still processing)", alias="processingTimeMs")
    __properties: ClassVar[List[str]] = ["requestId", "domainName", "similarityType", "queryString", "operator", "level", "limit", "createdAt", "completedAt", "status", "results", "resultCount", "processingTimeMs"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'IMMEDIATE', 'MAX_DEPTH']):
            raise ValueError("must be one of enum values ('ALL', 'IMMEDIATE', 'MAX_DEPTH')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PROCESSING', 'COMPLETED']):
            raise ValueError("must be one of enum values ('PROCESSING', 'COMPLETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainerAsyncResultDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "request_id",
            "domain_name",
            "query_string",
            "operator",
            "level",
            "limit",
            "created_at",
            "completed_at",
            "status",
            "results",
            "result_count",
            "processing_time_ms",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if query_string (nullable) is None
        # and model_fields_set contains the field
        if self.query_string is None and "query_string" in self.model_fields_set:
            _dict['queryString'] = None

        # set to None if operator (nullable) is None
        # and model_fields_set contains the field
        if self.operator is None and "operator" in self.model_fields_set:
            _dict['operator'] = None

        # set to None if level (nullable) is None
        # and model_fields_set contains the field
        if self.level is None and "level" in self.model_fields_set:
            _dict['level'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completedAt'] = None

        # set to None if results (nullable) is None
        # and model_fields_set contains the field
        if self.results is None and "results" in self.model_fields_set:
            _dict['results'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainerAsyncResultDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestId": obj.get("requestId"),
            "domainName": obj.get("domainName"),
            "similarityType": obj.get("similarityType"),
            "queryString": obj.get("queryString"),
            "operator": obj.get("operator"),
            "level": obj.get("level"),
            "limit": obj.get("limit"),
            "createdAt": obj.get("createdAt"),
            "completedAt": obj.get("completedAt"),
            "status": obj.get("status"),
            "results": obj.get("results"),
            "resultCount": obj.get("resultCount"),
            "processingTimeMs": obj.get("processingTimeMs")
        })
        return _obj



# coding: utf-8

"""
    Whisper API Platform

    Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@whisper.security
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from noctis_frontgraph_sdk.models.domainer_async_request_dto import DomainerAsyncRequestDTO

class TestDomainerAsyncRequestDTO(unittest.TestCase):
    """DomainerAsyncRequestDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainerAsyncRequestDTO:
        """Test DomainerAsyncRequestDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainerAsyncRequestDTO`
        """
        model = DomainerAsyncRequestDTO()
        if include_optional:
            return DomainerAsyncRequestDTO(
                domain_name = 'example.com',
                similarity_type = 'SOUNDING',
                query_string = 'exampl~ OR "domain search" OR domain_exact:prefix* OR domain:token',
                operator = 'AND',
                level = 'ALL',
                find_available = False,
                limit = 100,
                callback_url = 'https://webhook.example.com/callback'
            )
        else:
            return DomainerAsyncRequestDTO(
                callback_url = 'https://webhook.example.com/callback',
        )
        """

    def testDomainerAsyncRequestDTO(self):
        """Test DomainerAsyncRequestDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

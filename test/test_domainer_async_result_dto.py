# coding: utf-8

"""
    Whisper API Platform

    Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@whisper.security
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from noctis_frontgraph_sdk.models.domainer_async_result_dto import DomainerAsyncResultDTO

class TestDomainerAsyncResultDTO(unittest.TestCase):
    """DomainerAsyncResultDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainerAsyncResultDTO:
        """Test DomainerAsyncResultDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainerAsyncResultDTO`
        """
        model = DomainerAsyncResultDTO()
        if include_optional:
            return DomainerAsyncResultDTO(
                request_id = '123e4567-e89b-12d3-a456-426614174000',
                domain_name = 'example.com',
                similarity_type = 'TYPO',
                query_string = 'exampl~ OR "domain search" OR prefix*',
                operator = 'AND',
                level = 'ALL',
                limit = 100,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'COMPLETED',
                results = [
                    'exampel.com'
                    ],
                result_count = 42,
                processing_time_ms = 1542
            )
        else:
            return DomainerAsyncResultDTO(
                request_id = '123e4567-e89b-12d3-a456-426614174000',
                limit = 100,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'COMPLETED',
        )
        """

    def testDomainerAsyncResultDTO(self):
        """Test DomainerAsyncResultDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Whisper API Platform

    Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@whisper.security
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from noctis_frontgraph_sdk.models.ip_intelligence_response import IpIntelligenceResponse

class TestIpIntelligenceResponse(unittest.TestCase):
    """IpIntelligenceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IpIntelligenceResponse:
        """Test IpIntelligenceResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IpIntelligenceResponse`
        """
        model = IpIntelligenceResponse()
        if include_optional:
            return IpIntelligenceResponse(
                query = noctis_frontgraph_sdk.models.ip_intelligence_response_query.IpIntelligenceResponse_query(
                    ip = '8.8.8.8', 
                    timestamp = '2025-09-13T10:30Z', 
                    response_time_ms = 3500, ),
                summary = noctis_frontgraph_sdk.models.ip_intelligence_response_summary.IpIntelligenceResponse_summary(
                    organization = 'GOOGLE LLC', 
                    location = 'Mountain View, United States', 
                    network = '8.8.8.0/24', 
                    asn_primary = 'AS15169', 
                    risk_score = 0.0, 
                    ip_type = 'hosting', 
                    total_domains = 45, 
                    total_dns_records = 120, ),
                geolocation = noctis_frontgraph_sdk.models.ip_intelligence_response_geolocation.IpIntelligenceResponse_geolocation(
                    country = noctis_frontgraph_sdk.models.ip_intelligence_response_geolocation_country.IpIntelligenceResponse_geolocation_country(
                        iso_code = 'US', 
                        name = 'United States', 
                        confidence = 99, ), 
                    coordinates = noctis_frontgraph_sdk.models.ip_intelligence_response_geolocation_coordinates.IpIntelligenceResponse_geolocation_coordinates(
                        latitude = 37.4223, 
                        longitude = -122.085, 
                        accuracy_radius = 5, 
                        time_zone = 'America/Los_Angeles', ), ),
                network = None,
                isp = None,
                relationships = None,
                reputation = None,
                security = None,
                validation = None,
                history = None,
                asn_details = None,
                metadata = None
            )
        else:
            return IpIntelligenceResponse(
        )
        """

    def testIpIntelligenceResponse(self):
        """Test IpIntelligenceResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Whisper API v1

    <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@whisper.security
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from whisper_api_sdk.models.indicator_response import IndicatorResponse

class TestIndicatorResponse(unittest.TestCase):
    """IndicatorResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IndicatorResponse:
        """Test IndicatorResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IndicatorResponse`
        """
        model = IndicatorResponse()
        if include_optional:
            return IndicatorResponse(
                query = whisper_api_sdk.models.query_info.QueryInfo(
                    indicator = '', 
                    indicator_type = '', 
                    history_type = '', 
                    timestamp = '', 
                    response_time_ms = 56, ),
                summary = whisper_api_sdk.models.summary_info.SummaryInfo(
                    organization = 'Google LLC', 
                    location = 'Mountain View, California, US', 
                    network = '8.8.8.0/24', 
                    registrar = 'MarkMonitor Inc.', 
                    status = 'active', 
                    asn_primary = 'AS15169', 
                    risk_score = 1.2, 
                    ip_type = 'datacenter', 
                    total_domains = 142, 
                    domain_name = 'google.com', 
                    registration_date = '1997-09-15', 
                    expiration_date = '2028-09-14', 
                    dns_provider = 'Cloudflare', 
                    total_links_in = 1523, 
                    total_links_out = 89, ),
                geolocation = whisper_api_sdk.models.json_node.JsonNode(),
                network = whisper_api_sdk.models.json_node.JsonNode(),
                isp = whisper_api_sdk.models.json_node.JsonNode(),
                registration = whisper_api_sdk.models.json_node.JsonNode(),
                dns = whisper_api_sdk.models.dns_info.DnsInfo(
                    arecords = [
                        ''
                        ], 
                    a_records = ["8.8.8.8","8.8.4.4"], 
                    aaaa_records = ["2001:4860:4860::8888"], 
                    mx_records = [
                        whisper_api_sdk.models.json_node.JsonNode()
                        ], 
                    ns_records = ["ns1.google.com","ns2.google.com"], 
                    txt_records = [
                        ''
                        ], 
                    cname_records = [
                        ''
                        ], ),
                relationships = whisper_api_sdk.models.relationship_info.RelationshipInfo(
                    incoming_links = whisper_api_sdk.models.links_info.LinksInfo(
                        total = 1523, 
                        top_sources = ["example.com","test.org"], ), 
                    outgoing_links = whisper_api_sdk.models.links_info.LinksInfo(
                        total = 1523, 
                        top_sources = ["example.com","test.org"], ), 
                    related_domains = ["google.co.uk","google.ca","google.de"], 
                    shared_infrastructure = ["youtube.com","gmail.com"], ),
                reputation = whisper_api_sdk.models.reputation_info.ReputationInfo(
                    risk_score = 2.3, 
                    blacklists = whisper_api_sdk.models.blacklist_scores.BlacklistScores(
                        ip_score = 0.5, 
                        prefix_score = 1.2, 
                        asn_score = 0.8, ), 
                    domain_reputation = whisper_api_sdk.models.domain_reputation_scores.DomainReputationScores(
                        overall_score = 51.3, 
                        risk_level = 'medium_risk', 
                        domain_ip_score = 85.5, 
                        nameserver_ip_score = 45.2, 
                        mailserver_ip_score = 32.1, 
                        details = whisper_api_sdk.models.domain_reputation_details.DomainReputationDetails(
                            domain_ips = ["8.8.8.8"], 
                            domain_ip_scores = {
                                'key' : 1.337
                                }, 
                            nameserver_domains = ["ns1.example.com","ns2.example.com"], 
                            nameserver_ips = ["1.1.1.1","1.0.0.1"], 
                            nameserver_ip_scores = {
                                'key' : 1.337
                                }, 
                            mailserver_domains = ["mail.example.com"], 
                            mailserver_ips = ["74.125.28.27"], 
                            mailserver_ip_scores = {
                                'key' : 1.337
                                }, ), 
                        scoring_method = 'composite_infrastructure', 
                        weights = {
                            'key' : 1.337
                            }, ), ),
                security = whisper_api_sdk.models.json_node.JsonNode(),
                ip_intelligence = {
                    'key' : whisper_api_sdk.models.json_node.JsonNode()
                    },
                metadata = whisper_api_sdk.models.metadata_info.MetadataInfo(
                    data_sources = ["geolocation_db","whois_api","dns_resolver","threat_feeds"], 
                    errors = ["threat_feed_timeout","historical_whois_unavailable"], )
            )
        else:
            return IndicatorResponse(
        )
        """

    def testIndicatorResponse(self):
        """Test IndicatorResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
